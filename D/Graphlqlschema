interface DynamoDbBase {
  PK: ID!
  SK: ID!
  ExpiresAfter: String
}

type Document implements DynamoDbBase {
  PK: ID!
  SK: ID!
  ObjectKey: ID
  ObjectStatus: String
  InitialEventTime: String
  QueuedTime: String
  WorkflowStartTime: String
  CompletionTime: String
  WorkflowExecutionArn: String
  WorkflowStatus: String
  PageCount: Int
  Sections: [Section]
  Pages: [Page]
  Metering: String
  EvaluationReportUri: String
  EvaluationStatus: String
  SummaryReportUri: String
  ExpiresAfter: String
  HITLStatus: String
  HITLReviewURL: String
}

type Section {
  Id: String
  PageIds: [Int]
  Class: String
  OutputJSONUri: String
  ConfidenceThresholdAlerts: [ConfidenceThresholdAlert]
}

type ConfidenceThresholdAlert {
  attributeName: String
  confidence: Float
  confidenceThreshold: Float
}

type Page {
  Id: Int
  Class: String
  ImageUri: String
  TextUri: String
  TextConfidenceUri: String
}

type DocumentList {
  Documents: [DocumentListItem]
  nextToken: String
}

type DocumentListItem implements DynamoDbBase {
  PK: ID!
  SK: ID!
  ObjectKey: ID
  InitialEventTime: String
  ExpiresAfter: String
  HITLStatus: String
  HITLReviewURL: String
}

type ConfigurationResponse {
  Schema: String
  Default: String
  Custom: String
}

input CreateDocumentInput {
  ObjectKey: ID
  ObjectStatus: String
  InitialEventTime: String
  QueuedTime: String
  ExpiresAfter: String
}

type CreateDocumentOutput {
  ObjectKey: ID
}

type PresignedUrlResponse {
  presignedUrl: String!
  objectKey: String!
  usePostMethod: String!
}

input UpdateDocumentInput {
  ObjectKey: ID!
  ObjectStatus: String
  QueuedTime: String
  WorkflowStartTime: String
  CompletionTime: String
  WorkflowExecutionArn: String
  WorkflowStatus: String
  PageCount: Int
  Sections: [SectionInput]
  Pages: [PageInput]
  Metering: String
  EvaluationReportUri: String
  EvaluationStatus: String
  SummaryReportUri: String
  HITLStatus: String
  HITLReviewURL: String
}

input SectionInput {
  Id: String
  PageIds: [Int]
  Class: String
  OutputJSONUri: String
  ConfidenceThresholdAlerts: [ConfidenceThresholdAlertInput]
}

input ConfidenceThresholdAlertInput {
  attributeName: String
  confidence: Float
  confidenceThreshold: Float
}

input PageInput {
  Id: Int
  Class: String
  ImageUri: String
  TextUri: String
  TextConfidenceUri: String
}

type CopyToBaselineResponse {
  success: Boolean!
  message: String
}

type FileContentsResponse {
  content: String!
  contentType: String!
  size: Int!
  isBinary: Boolean
}

type StepFunctionExecutionStep {
  name: String!
  type: String!
  status: String!
  startDate: String
  stopDate: String
  input: String
  output: String
  error: String
  mapIterations: Int
  mapIterationDetails: [StepFunctionExecutionStep]
}

type StepFunctionExecutionResponse {
  executionArn: String!
  status: String!
  startDate: String
  stopDate: String
  input: String
  output: String
  error: String
  steps: [StepFunctionExecutionStep]
}

type AnalyticsJob {
  jobId: ID!
  status: String!
  query: String!
  createdAt: String!
  completedAt: String
  result: String
  error: String
  agent_messages: String
}

type AnalyticsJobConnection {
  items: [AnalyticsJob]
  nextToken: String
}

type Mutation {
  createDocument(input: CreateDocumentInput!): CreateDocumentOutput
  updateDocument(input: UpdateDocumentInput!): Document
  deleteDocument(objectKeys: [String!]!): Boolean!
  updateConfiguration(customConfig: String!): Boolean
  uploadDocument(fileName: String!, contentType: String, prefix: String, bucket: String): PresignedUrlResponse!
  copyToBaseline(objectKey: String!): CopyToBaselineResponse!
  reprocessDocument(objectKeys: [String!]!): Boolean!
  publishStepFunctionExecutionUpdate(executionArn: String!, data: String!): StepFunctionExecutionResponse
  updateAnalyticsJobStatus(jobId: ID!, status: String!, userId: String!, result: String): Boolean
  deleteAnalyticsJob(jobId: ID!): Boolean
}

type Query {
  getDocument(ObjectKey: ID!): Document
  listDocuments(startDateTime: String, endDateTime: String): DocumentList
  listDocumentsDateHour(date: String, hour: Int): DocumentList
  listDocumentsDateShard(date: String, shard: Int): DocumentList 
  getFileContents(s3Uri: String!): FileContentsResponse
  getConfiguration: ConfigurationResponse
  queryKnowledgeBase(input: String!, sessionId: String): String
  chatWithDocument(s3Uri: String!, prompt: String!, history: String!, modelId: String!): String
  getStepFunctionExecution(executionArn: String!): StepFunctionExecutionResponse
  submitAnalyticsQuery(query: String!): AnalyticsJob
  getAnalyticsJobStatus(jobId: ID!): AnalyticsJob
  listAnalyticsJobs(limit: Int, nextToken: String): AnalyticsJobConnection
}

type Subscription {
  onCreateDocument: CreateDocumentOutput
  onUpdateDocument: Document
  onStepFunctionExecutionUpdate(executionArn: String!): StepFunctionExecutionResponse
  onAnalyticsJobComplete(jobId: ID!): Boolean
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
