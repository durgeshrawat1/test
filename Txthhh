terraform {
  required_providers {
    archive = {
      source  = "hashicorp/archive"
      version = "~> 2.4"
    }
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }

  required_version = ">= 1.3.0"
}

provider "aws" {
  region = "us-east-1"
}

locals {
  lambda_functions = ["lambda1", "lambda2"]
}

# Role (basic execution role, replace with your own IAM setup if needed)
resource "aws_iam_role" "lambda_exec" {
  name = "lambda_exec_role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Action = "sts:AssumeRole"
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
    }]
  })
}

resource "aws_iam_role_policy_attachment" "basic_exec" {
  role       = aws_iam_role.lambda_exec.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Step 1: Install Python dependencies and prepare build
resource "null_resource" "pip_install" {
  count = length(local.lambda_functions)

  provisioner "local-exec" {
    command = <<EOT
      rm -rf lambda/${local.lambda_functions[count.index]}/build && \
      mkdir -p lambda/${local.lambda_functions[count.index]}/build && \
      pip install -r lambda/${local.lambda_functions[count.index]}/requirements.txt -t lambda/${local.lambda_functions[count.index]}/build && \
      cp lambda/${local.lambda_functions[count.index]}/index.py lambda/${local.lambda_functions[count.index]}/build/
    EOT
  }

  triggers = {
    always_run = timestamp()
  }
}

# Step 2: Zip the build directory
data "archive_file" "lambda_zip" {
  count       = length(local.lambda_functions)
  type        = "zip"
  source_dir  = "${path.module}/../lambda/${local.lambda_functions[count.index]}/build"
  output_path = "${path.module}/../builds/${local.lambda_functions[count.index]}.zip"

  depends_on = [null_resource.pip_install]
}

# Step 3: Deploy Lambda
resource "aws_lambda_function" "lambda" {
  count = length(local.lambda_functions)

  function_name = local.lambda_functions[count.index]
  handler       = "index.handler"
  runtime       = "python3.10"

  role          = aws_iam_role.lambda_exec.arn
  filename      = data.archive_file.lambda_zip[count.index].output_path
  source_code_hash = data.archive_file.lambda_zip[count.index].output_base64sha256
}
