resource "null_resource" "pip_install" {
  count = length(local.lambda_functions)

  provisioner "local-exec" {
    command = <<EOT
      BASE_PATH="${path.module}/lambda/${local.lambda_functions[count.index]}"
      BUILD_PATH="$BASE_PATH/build"
      mkdir -p "$BUILD_PATH"
      rm -rf "$BUILD_PATH"/*

      if [ -f "$BASE_PATH/requirements.txt" ]; then
        pip install -r "$BASE_PATH/requirements.txt" -t "$BUILD_PATH"
      fi

      if [ -f "$BASE_PATH/index.py" ]; then
        cp "$BASE_PATH/index.py" "$BUILD_PATH/"
      fi

      ls -la "$BUILD_PATH"
    EOT
  }

  triggers = {
    always_run = timestamp()
  }
}

data "archive_file" "lambda_zip" {
  count       = length(local.lambda_functions)
  type        = "zip"
  source_dir  = "${path.module}/lambda/${local.lambda_functions[count.index]}/build"
  output_path = "${path.module}/builds/${local.lambda_functions[count.index]}.zip"

  depends_on = [null_resource.pip_install]
}

resource "aws_lambda_function" "lambda" {
  count = length(local.lambda_functions)

  function_name    = local.lambda_functions[count.index]
  handler          = "index.handler"
  runtime          = "python3.10"
  role             = aws_iam_role.lambda_exec.arn
  filename         = data.archive_file.lambda_zip[count.index].output_path
  source_code_hash = data.archive_file.lambda_zip[count.index].output_base64sha256
}
