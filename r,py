import boto3
from pymongo import MongoClient
import os
import json

# Configuration - Update these values
DOCDB_URI = os.getenv('DOCDB_URI', 'mongodb://user:pass@docdb-cluster:27017/?tls=true')
BEDROCK_REGION = 'us-east-1'  # Update your region
CA_FILE = '/etc/ssl/certs/rds-combined-ca-bundle.pem'  # Standard EC2 CA path

# Initialize clients directly
bedrock = boto3.client('bedrock-runtime', region_name=BEDROCK_REGION)
docdb_client = MongoClient(
    DOCDB_URI,
    tls=True,
    tlsCAFile=CA_FILE,
    retryWrites=False,
    server_api=ServerApi('1')
)

def get_embedding(text: str) -> list[float]:
    """Direct Titan 2025 embedding generation"""
    try:
        response = bedrock.invoke_model(
            modelId='amazon.titan-embed-text-v2:0',
            body=json.dumps({'text': text})
        return json.loads(response['body'].read())['embedding']
    except Exception as e:
        print(f"Embedding error: {str(e)}")
        raise

def query_documents(question: str, top_k: int = 3) -> list:
    """Simplified 2025 DocumentDB vector search"""
    try:
        collection = docdb_client.your_db.your_collection
        embedding = get_embedding(question)
        
        return list(collection.aggregate([
            {
                "$vectorSearch": {
                    "index": "vector_index",
                    "path": "embedding",
                    "queryVector": embedding,
                    "numCandidates": 100,
                    "limit": top_k
                }
            },
            {"$project": {"text": 1, "_id": 0}}
        ]))
    except Exception as e:
        print(f"Query error: {str(e)}")
        raise

def generate_response(question: str) -> str:
    """Direct Claude 3 Sonnet invocation"""
    try:
        context_docs = query_documents(question)
        context = "\n".join([doc['text'] for doc in context_docs])
        
        response = bedrock.invoke_model(
            modelId='anthropic.claude-3-sonnet-v1:0',
            body=json.dumps({
                "messages": [{
                    "role": "user",
                    "content": f"Answer this based on context:\n{context}\nQuestion: {question}"
                }],
                "max_tokens": 1024
            })
        )
        return json.loads(response['body'].read())['content'][0]['text']
    except Exception as e:
        print(f"Generation error: {str(e)}")
        raise

# Usage
if __name__ == "__main__":
    question = "Your question here"
    print(f"Q: {question}")
    print(f"A: {generate_response(question)}")
