import os
import json
import boto3
from pymongo import MongoClient
from langchain.chains import ConversationalRetrievalChain
from langchain.prompts import PromptTemplate
from langchain_community.embeddings import BedrockEmbeddings
from langchain_community.vectorstores import DocumentDBVectorSearch
from langchain_aws import ChatBedrock as BedrockChat

# Initialize AWS clients
bedrock_runtime = boto3.client('bedrock-runtime', region_name='us-east-1')
secrets_manager = boto3.client('secretsmanager', region_name='us-east-1')

# Fetch credentials from AWS Secrets Manager
def get_credentials(secret_id):
    response = secrets_manager.get_secret_value(SecretId=secret_id)
    return json.loads(response['SecretString'])

# Fetch DocumentDB credentials
def get_docdb_credentials(secret_id):
    return get_credentials(secret_id)

# Initialize MongoDB client
def get_mongo_client():
    return MongoClient(os.getenv('MONGO_URI'))

# Initialize Bedrock Chat model
def get_bedrock_chat_model():
    return BedrockChat(
        client=bedrock_runtime,
        model_id="anthropic.claude-3-7-sonnet-20250219-v1:0",
        temperature=0.2,
        max_tokens=1024
    )

# Initialize embedding model
def get_embedding_model():
    return BedrockEmbeddings(
        client=bedrock_runtime,
        model_id="amazon.titan-embed-text-v2:0",
        embedding_dimension=1024
    )

# Initialize DocumentDB vector store
def get_vector_store():
    client = get_mongo_client()
    return DocumentDBVectorSearch(
        client=client,
        database_name="ragdemo",
        collection_name="rag",
        embedding_model=get_embedding_model()
    )

# Initialize ConversationalRetrievalChain
def get_conversational_chain():
    vector_store = get_vector_store()
    return ConversationalRetrievalChain.from_llm(
        llm=get_bedrock_chat_model(),
        retriever=vector_store.as_retriever(),
        return_source_documents=True
    )

# Main function to handle user input and generate response
def main():
    conversation = get_conversational_chain()
    while True:
        user_input = input("You: ")
        if user_input.lower() == 'exit':
            break
        response = conversation({"question": user_input})
        print(f"Assistant: {response['answer']}")
        print(f"Sources: {response['source_documents']}")

if __name__ == "__main__":
    main()
