from pymongo import MongoClient
from bson import Binary
import struct
import boto3
import json

def get_embedding(text: str) -> list:
    """AWS Titan 2025 Embedding Generation"""
    bedrock = boto3.client('bedrock-runtime', region_name='us-east-1')
    
    response = bedrock.invoke_model(
        modelId='amazon.titan-embed-text-v2:0',
        body=json.dumps({
            "inputText": text,
            "embeddingConfig": {
                "dimensions": 1024,
                "normalize": True  # Required for DocumentDB compatibility
            }
        })
    )
    embedding = json.loads(response['body'].read())['embedding']
    
    # DocumentDB requires float32 precision
    return [float(x) for x in embedding]

def query_documents(question: str) -> list:
    """DocumentDB 2025 Vector Search Syntax"""
    DOCDB_URI = "mongodb://user:pass@docdb-cluster:27017/?tls=true&retryWrites=false"
    
    with MongoClient(
        DOCDB_URI,
        tls=True,
        tlsCAFile='/etc/ssl/certs/rds-combined-ca-bundle.pem',
        server_api=ServerApi('1')
    ) as client:
        
        collection = client.your_db.your_collection
        embedding = get_embedding(question)
        
        # Convert to BSON Binary for DocumentDB
        binary_vector = Binary(struct.pack(f'{len(embedding)}f', *embedding))
        
        return list(collection.aggregate([
            {
                "$vectorSearch": {
                    "index": "vector_index",
                    "path": "embedding",
                    "queryVector": binary_vector,
                    "numCandidates": 200,  # Must be â‰¥100 for 2025 DocumentDB
                    "limit": 3,
                    "filter": {},  # Required even when empty
                    "options": {"efSearch": 128}  # Required for IVF indexes
                }
            },
            {"$project": {"text": 1, "score": {"$meta": "vectorSearchScore"}}
        ]))
