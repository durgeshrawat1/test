import boto3
from pymongo import MongoClient
import os
import json

# Configuration - Update these values
DOCDB_URI = os.getenv('DOCDB_URI', 'mongodb://user:pass@docdb-cluster:27017/?tls=true&retryWrites=false')
BEDROCK_REGION = 'us-east-1'  # Update your region

# Initialize modern Bedrock client
session = boto3.Session()
bedrock = session.client(service_name='bedrock-agent-runtime', region_name=BEDROCK_REGION)

# DocumentDB client with 2025 connection requirements
docdb_client = MongoClient(
    DOCDB_URI,
    server_api=ServerApi('1'),
    tls=True,
    tlsCAFile='/path/to/rds-combined-ca-bundle.pem'  # Required for DocumentDB TLS
)

def get_embedding(text: str) -> list:
    """AWS Titan 2025 Embeddings with new API format"""
    response = bedrock.invoke_model(
        modelId='amazon.titan-embed-g1-text-2025',  # Updated 2025 model ID
        body=json.dumps({
            "inputText": text,
            "embeddingConfig": {
                "dimensions": 1024  # Must match collection index dimension
            }
        })
    )
    return json.loads(response['body'].read())['embedding']

def vector_search(query: str) -> list:
    """2025 DocumentDB vector search syntax"""
    collection = docdb_client.your_db.your_collection
    embedding = get_embedding(query)
    
    return list(collection.aggregate([
        {
            "$vectorSearch": {
                "index": "your_vector_index",
                "queryVector": embedding,
                "path": "embedding",
                "numCandidates": 150,  # Updated 2025 recommendation
                "limit": 3,
                "filter": {}  # Required in 2025 syntax
            }
        },
        {"$project": {"text": 1, "score": {"$meta": "searchScore"}}}
    ]))

def generate_answer(query: str, context: str) -> str:
    """Anthropic Claude Sonnet 2025 API format"""
    response = bedrock.invoke_model(
        modelId='anthropic.claude-3-sonnet-2025-v1.0',
        body=json.dumps({
            "system": "Answer using only the provided context",
            "messages": [{
                "role": "user",
                "content": [
                    {"type": "text", "text": f"Question: {query}"},
                    {"type": "text", "text": f"Context: {context}"}
                ]
            }],
            "max_tokens": 1024,
            "temperature": 0.5
        })
    )
    return json.loads(response['body'].read())['content'][0]['text']

# Usage Example
question = "What's the capital of France?"
results = vector_search(question)
context = "\n".join([doc['text'] for doc in results])
answer = generate_answer(question, context)

print(f"Q: {question}\nA: {answer}")
