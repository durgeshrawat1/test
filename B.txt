terraform {
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-1"
}

resource "aws_iam_role" "lambda_exec" {
  name = "lambda_exec_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [{
      Effect = "Allow"
      Principal = {
        Service = "lambda.amazonaws.com"
      }
      Action = "sts:AssumeRole"
    }]
  })
}

locals {
  lambda_functions = [
    {
      name         = "save_reporting_data"
      folder       = "save_reporting_data"
      handler      = "index.lambda_handler"
      needs_layer  = true
    },
    {
      name         = "other_lambda"
      folder       = "other_lambda"
      handler      = "index.handler"
      needs_layer  = false
    }
  ]
}

# Build the shared Lambda layer
resource "null_resource" "build_lambda_layer" {
  provisioner "local-exec" {
    command = <<EOT
      rm -rf ${path.module}/layer_build
      mkdir -p ${path.module}/layer_build/python
      cp -r ${path.module}/lib/idp_common_pkg/idp_commons ${path.module}/layer_build/python/
      cd ${path.module}/layer_build && zip -r ../build_artifacts/idp_commons_layer.zip . > /dev/null
      rm -rf ${path.module}/layer_build
    EOT
  }
}

# Package all Lambda zips
resource "null_resource" "build_lambda_zip" {
  count = length(local.lambda_functions)

  provisioner "local-exec" {
    command = <<EOT
      mkdir -p ${path.module}/build_artifacts
      rm -f ${path.module}/build_artifacts/${local.lambda_functions[count.index].name}.zip
      cd ${path.module}/lambdas/${local.lambda_functions[count.index].folder} && zip -r ../../../build_artifacts/${local.lambda_functions[count.index].name}.zip . > /dev/null
    EOT
  }
}

# Deploy the Lambda layer
resource "aws_lambda_layer_version" "idp_commons_layer" {
  layer_name          = "idp_commons_layer"
  compatible_runtimes = ["python3.9"]
  filename            = "${path.module}/build_artifacts/idp_commons_layer.zip"
  source_code_hash    = filebase64sha256("${path.module}/build_artifacts/idp_commons_layer.zip")

  depends_on = [null_resource.build_lambda_layer]
}

# Deploy all Lambda functions
resource "aws_lambda_function" "lambda_functions" {
  count = length(local.lambda_functions)

  function_name = local.lambda_functions[count.index].name
  handler       = local.lambda_functions[count.index].handler
  runtime       = "python3.9"
  role          = aws_iam_role.lambda_exec.arn

  filename         = "${path.module}/build_artifacts/${local.lambda_functions[count.index].name}.zip"
  source_code_hash = filebase64sha256("${path.module}/build_artifacts/${local.lambda_functions[count.index].name}.zip")

  layers = local.lambda_functions[count.index].needs_layer ? [
    aws_lambda_layer_version.idp_commons_layer.arn
  ] : []

  timeout     = 60
  memory_size = 1024

  depends_on = [null_resource.build_lambda_zip]
}
